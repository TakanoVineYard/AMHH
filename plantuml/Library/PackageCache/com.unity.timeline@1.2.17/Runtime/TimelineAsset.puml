@startuml
class TimelineAsset <<partial>> {
    m_FixedDuration : double
    + <<override>> duration : double <<get>>
    + fixedDuration : double <<get>> <<set>>
    + outputTrackCount : int <<get>>
    + rootTrackCount : int <<get>>
    OnValidate() : void
    {static} GetValidFramerate(framerate:float) : float
    + GetRootTrack(index:int) : TrackAsset
    + GetRootTracks() : IEnumerable<TrackAsset>
    + GetOutputTrack(index:int) : TrackAsset
    + GetOutputTracks() : IEnumerable<TrackAsset>
    UpdateRootTrackCache() : void
    UpdateOutputTrackCache() : void
    + <<override>> CreatePlayable(graph:PlayableGraph, go:GameObject) : Playable
    OnBeforeSerialize() : void
    OnAfterDeserialize() : void
    __internalAwake() : void
    + GatherProperties(director:PlayableDirector, driver:IPropertyCollector) : void
    + CreateMarkerTrack() : void
    CalculateDuration() : double
    {static} AddSubTracksRecursive(track:TrackAsset, allTracks:List<TrackAsset>) : void
}
enum DurationMode {
    BasedOnClips,
    FixedLength,
}
class EditorSettings {
    m_Framerate : float
    + fps : float <<get>> <<set>>
}
class "List`1"<T> {
}
class "IEnumerable`1"<T> {
}
PlayableAsset <|-- TimelineAsset
ISerializationCallbackReceiver <|-- TimelineAsset
ITimelineClipAsset <|-- TimelineAsset
IPropertyPreview <|-- TimelineAsset
TimelineAsset --> "m_Tracks<ScriptableObject>" "List`1"
TimelineAsset --> "m_CacheRootTracks<TrackAsset>" "List`1"
TimelineAsset --> "m_CacheFlattenedTracks<TrackAsset>" "List`1"
TimelineAsset o-> "m_EditorSettings" EditorSettings
TimelineAsset --> "m_DurationMode" DurationMode
TimelineAsset --> "m_MarkerTrack" MarkerTrack
TimelineAsset --> "editorSettings" EditorSettings
TimelineAsset --> "durationMode" DurationMode
TimelineAsset --> "outputs<PlayableBinding>" "IEnumerable`1"
TimelineAsset --> "clipCaps" ClipCaps
TimelineAsset --> "markerTrack" MarkerTrack
TimelineAsset +-- DurationMode
TimelineAsset +-- EditorSettings
@enduml
